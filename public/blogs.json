[
  {
    "blog_title": "Book Review (JavaScript: The Good Parts by Douglas Crockford)",
    "blog_photo": "javascript_the_good_parts_cover.png",
    "blog_text": "<div><span style=\"white-space: normal;\">This is a partial review of <a href=\"https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742\">JavaScript: The Good Parts</a>, as I'm currently on chapter 7 (Regular Expressions).</span></div><div><span style=\"white-space: normal;\"><br></span></div><div><span style=\"white-space: normal;\"><b>Chapter 1 - Good Parts</b></span></div><div><span style=\"white-space: normal;\"><br></span></div><div><span style=\"white-space: normal;\">This is a <i>very</i> brief chapter in which Douglas makes the point that <u>no</u> programming language is perfect - you (<i>as a developer</i>) ultimately need to decide which aspects are worth using and which are not. Of course, as with using any tool skillfully, this requires time and experience in order to develop the ability to make these judgement calls - or a guide (like this book).</span></div><div><span style=\"white-space: normal;\"><br></span></div><div><span style=\"white-space: normal;\">The rest of the chapter discusses some of the <u>good</u> and <u>bad</u> parts of JavaScript (such as <i>object literal notation</i> and the <i>global object</i>, respectively), while making the point that a lot of the \"issues\" with JavaScript are actually with the Document Object Module (DOM) and not JavaScript itself.</span></div><div><span style=\"white-space: normal;\"><br></span></div><div><span style=\"white-space: normal;\">Finally, to answer \"<i>why JavaScript?</i>\" - it's because it's the language of the Web. Java had its shot back in the day (and failed) while JavaScript succeeded, so avoiding JavaScript is not really an option. And since it's <i>very</i> easy to write (bad) JavaScript, it's important to make the time to become adept in reading and writing it.</span></div><div><span style=\"white-space: normal;\"><br></span></div><div><span style=\"white-space: normal;\"><b>Chapter 2 - Grammar</b></span></div><div><span style=\"white-space: normal;\"><br></span></div><div><span style=\"white-space: normal;\">This chapter provides a brief overview of the grammar of the <u>good parts</u> of JavaScript - specifically:</span></div><div><ul><li>whitespace and comments (// <i>preferred</i>)<br></li><li>names (<i>rules, reserved words</i>)<br></li><li>numbers (<i>single 64-bit floating point type</i>)<br></li><li>strings (<i>quotes, escape character, immutable property</i>)<br></li><li>statements (<i>expression, conditional, looping, disruptive</i>)<br></li><li>expressions<br></li><li>literals (<i>number, string, object, array, function, regexp</i>)<br></li><li>functions<br></li></ul></div><div><span style=\"white-space: normal;\"><b>Chapter 3 - Objects</b></span></div><div><span style=\"white-space: normal;\"><br></span></div><div><span style=\"white-space: normal;\">This chapter discusses <u>objects</u> (arrays, functions, regular expressions and object literals), including:</span></div><div><ul><li>how to create an object<br></li><li>property aspects<br></li><li>retrieving values<br></li><li>updating an object<br></li><li>reference (<i>objects are never copied</i>)<br></li><li>prototype (<i>Object.prototype, prototype link</i>)<br></li><li>reflection (<i>inspecting objects</i>)<br></li><li>enumeration (<i>for in [no guaranteed order], for</i>)<br></li><li>deleting properties<br></li><li>global (object) variable to deal with global scope<br></li></ul></div><div><span style=\"white-space: normal;\"><b>Chapter 4 - Functions</b></span></div><div><span style=\"white-space: normal;\"><br></span></div><div><span style=\"white-space: normal;\">This chapter discussed a number of function concepts that were familiar (return values, scope), some that I've recently started using (closure, callbacks), and a number that I <b>really</b> need to go back to and play with more in order to develop a better understanding (module, cascade, curry, memoization).</span></div><div><span style=\"white-space: normal;\"><br></span></div><div><span style=\"white-space: normal;\"><b>Chapter 5 - Inheritance</b></span></div><div><span style=\"white-space: normal;\"><br></span></div><div><span style=\"white-space: normal;\">The Inheritance chapter starts off with providing a \"pseudoclassical\" approach to JavaScript and how one might develop using a typical \"classes\" approach, then discusses the downsides of doing so (such as composing hierarchies that are unnecessarily deep and complicated).</span></div><div><span style=\"white-space: normal;\">Douglas then rewrites the previous example using prototypal inheritance and the functional pattern in order to show the benefit of doing things in a more \"natural\" way for the language.</span></div><div><span style=\"white-space: normal;\"><br></span></div><div><span style=\"white-space: normal;\"><b>Chapter 6 - Arrays</b></span></div><div><span style=\"white-space: normal;\"><br></span></div><div><span style=\"white-space: normal;\">After the Functions and Inheritance chapters (which contained a <u>lot </u>of new concepts), this chapter was <i>very </i>reassuring. Arrays in JavaScript have some differences from other languages (for example, an array's length is not an upper bound), but otherwise the aspects (such as deleting elements, enumerating, methods) are pretty familiar.</span></div>"
  }
]
