[
  {
    "blog_title": "Blog without Photo",
    "blog_date": "Tue Jul 25 2017",
    "blog_text": "No photo for this blog."
  },
  {
    "blog_title": "Blog with Photo",
    "blog_date": "Tue Jul 25 2017",
    "blog_text": "This blog has a photo.",
    "blog_photo": "anole.png"
  },
  {
    "blog_title": "Another Blog without a Photo",
    "blog_date": "Tue Jul 25 2017",
    "blog_text": "Testing again with <u>console logging</u>."
  },
  {
    "blog_title": "Another Blog with a Photo",
    "blog_date": "Tue Jul 25 2017",
    "blog_text": "Testing again with <u>console logging</u>.",
    "blog_photo": "caterpillar.png"
  },
  {
    "blog_title": "Page Refresh Enabled Again",
    "blog_date": "Tue Jul 25 2017",
    "blog_text": "Left console logging on but page refresh means it doesn't stay in the console."
  },
  {
    "blog_title": "New DateTime Format",
    "blog_date": "Tue Jul 25 2017 @ 22:38",
    "blog_text": "Trying out new datetime format."
  },
  {
    "blog_title": "Book Review (JavaScript: The Good Parts by Douglas Crockford)",
    "blog_date": "Wed Jul 26 2017 @ 23:6",
    "blog_text": "This is a partial review of JavaScript: The Good Parts, as I'm currently on chapter 7 (Regular Expressions).\n\n<b>Chapter 1 - Good Parts</b>\n\nThis is a <i>very</i> brief chapter in which Douglas makes the point that <u>no</u> programming language is perfect - you (<i>as a developer</i>) ultimately need to decide which aspects are worth using and which are not. Of course, as with using any tool skillfully, this requires time and experience in order to develop the ability to make these judgement calls - or a guide (like this book).\n\nThe rest of the chapter discusses some of the <u>good</u> and <u>bad</u> parts of JavaScript (such as <i>object literal notation</i> and the <i>global object</i>, respectively), while making the point that a lot of the \"issues\" with JavaScript are actually with the Document Object Module (DOM) and not JavaScript itself.\n\nFinally, to answer \"why JavaScript?\" - it's because it's the language of the Web.  Java had its shot back in the day (and failed) while JavaScript succeeded, so avoiding JavaScript is not really an option.  And since it's <i>very</i> easy to write (bad) JavaScript, it's important to make the time to become adept in reading and writing it.\n\n<b>Chapter 2 - Grammar</b>\n\nThis chapter provides a brief overview of the grammar of the <i>good parts</i> of JavaScript - specifically:\n- whitespace and comments (// <i>preferred</i>)\n- names (<i>rules, reserved words</i>)\n- numbers (<i>single 64-bit floating point type</i>)\n- strings (<i>quotes, escape character, immutable property</i>)\n- statements (<i>expression, conditional, looping, disruptive</i>)\n- expressions\n- literals (<i>number, string, object, array, function, regexp</i>)\n- functions\n\n<b>Chapter 3 - Objects</b>\n\nThis chapter discusses <u>objects</u> (arrays, functions, regular expressions and object literals), including:\n- how to create an object\n- property aspects\n- retrieving values\n- updating an object\n- reference (<i>objects are never copied</i>)\n- prototype (<i>Object.prototype, prototype link</i>)\n- reflection (<i>inspecting objects</i>)\n- enumeration (<i>for in [no guaranteed order], for</i>)\n- deleting properties\n- global (object) variable to deal with global scope\n\n<b>Chapter 4 - Functions</b>\n\nThis chapter discussed a number of function concepts that were familiar (return values, scope), some that I've recently started using (closure, callbacks), and a number that I <b>really</b> need to go back and play with more in order to develop a better understanding (module, cascade, curry, memoization).\n\n<b>Chapter 5 - Inheritance</b>\n\nThe Inheritance chapter starts off with providing a \"pseudoclassical\" approach to JavaScript and how one might develop using a typical \"classes\" approach, then discusses the downsides of doing so (such as composing hierarchies that are unnecessarily deep and complicated).\n\nDouglas then rewrites the previous example using prototypal inheritance and the functional pattern in order to show the benefit of doing things in a more \"natural\" way for the language.\n\n<b>Chapter 6 - Arrays</b>\n\nAfter the Functions and Inheritance chapters (which contained a <u>lot</u> of new concepts), this chapter was <i>very</i> reassuring.  Arrays in JavaScript have some differences from other languages (for example, an array's length is not an upper bound), but otherwise the aspects (such as deleting elements, enumerating, methods) are pretty familiar.",
    "blog_photo": "javascript_the_good_parts_cover.png"
  }
]
